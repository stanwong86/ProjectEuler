'''
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''

import time
import math

def sum_of_factors():
    sum = 0
    i = 0
    factors = []
    while len(factors) < 500:
        i += 1
        sum += i
        c = 0
        factors = []
        while c < sum:
            c += 1
            if sum % c == 0:
                if(c >= sum/c):
                    break
                factors.append(c)
                factors.append(int(sum/c))
        #print('sum='+str(sum)+',factors='+str(len(factors)))
    factors.sort()
    print(factors)
    print(sum)

def seq_of_tri(n):
    sum = 0
    for i in range(1, n):
        sum += i
        print(sum)

def test2():
    sum = 0
    i = 0
    factors = 0
    while factors < 500:
        i += 1
        sum += i
        c = 0
        factors = 0
        while c < sum:
            c += 1
            if sum % c == 0:
                if(c >= sum/c):
                    break
                factors += 2
        #print('sum='+str(sum)+',factors='+str(len(factors)))
    print(factors)
    print(sum)

start_time = time.time()
sum_of_factors() #15.568000078201294 seconds
#test2() #15.457000017166138 seconds
print (time.time() - start_time, "seconds")
#seq_of_tri(1000)
#sum_of_factors() #15.568000078201294 seconds
